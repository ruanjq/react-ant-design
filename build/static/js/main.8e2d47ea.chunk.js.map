{"version":3,"sources":["App.js","serviceWorker.js","index.js","routes/index.js","redux/reducers/app_reducer.js","redux/reducers/index.js","redux/reducers/counter_reduce.js","redux/store/index.js"],"names":["process","yourConfig","zhCN","store","routers","map","r","key","component","exact","path","from","to","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","Loading","routes","name","Loadable","loader","loading","childRoutes","rootReducer","combineReducers","counter","state","count","action","type","app","appInfo","payload","createStore","compose","applyMiddleware","thunk","__REDUX_DEVTOOLS_EXTENSION__"],"mappings":"oQAsCeA,E,iLArBP,IAAIC,EAAa,CACb,OAAS,CAACC,WAEd,OAEI,kBAAC,IAAD,CAAUC,MAAOA,KACb,sBAAoBF,EAChB,kBAAC,IAAD,KACI,kBAAC,IAAD,KAEKG,IAAQC,KAAI,SAACC,EAAGC,GAAJ,OAAY,kBAAC,IAAD,CAAOC,UAAWF,EAAEE,UAAWC,QAASH,EAAEG,MAAOF,IAAKA,EAAKG,KAAMJ,EAAEI,UAC5F,kBAAC,IAAD,CAAUD,OAAK,EAACE,KAAK,IAAIC,GAAG,eAC5B,kBAAC,IAAD,CAAUD,KAAK,IAAIC,GAAG,iB,GAhBhCC,aCDEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,mBD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,kFE9HfC,EAAU,kBAAM,6BAEhBC,EAAS,CACT,CACIpB,KAAK,OACLqB,KAAK,MACLvB,UAAUwB,IAAS,CACfC,OAAO,kBAAK,oDACZC,QAAQL,IAEZM,YAAY,CACR,CACIzB,KAAK,SACLqB,KAAK,QACLvB,UAAUwB,IAAS,CACfC,OAAO,kBAAK,+BACZC,QAAQL,OAItB,CACEnB,KAAK,OACLqB,KAAK,WACLvB,UAAUwB,IAAS,CACfC,OAAO,kBAAK,+BACZC,QAAQL,KAEd,CACEnB,KAAK,SACLF,UAAUwB,IAAS,CACfC,OAAO,kBAAK,oDACZC,QAAQL,IAEZM,YAAY,CACR,CACIzB,KAAK,SACLqB,KAAK,YACLvB,UAAUwB,IAAS,CACfC,OAAO,kBAAK,gCACZC,QAAQL,KAEd,CACEnB,KAAK,YACLqB,KAAK,WACLvB,UAAUwB,IAAS,CACfC,OAAO,kBAAK,8BACZC,QAAQL,KAEd,CACEnB,KAAK,aACLqB,KAAK,YACLvB,UAAUwB,IAAS,CACfC,OAAO,kBAAK,gCACZC,QAAQL,KAEd,CACEnB,KAAK,YACLqB,KAAK,WACLvB,UAAUwB,IAAS,CACfC,OAAO,kBAAK,8BACZC,QAAQL,KAEd,CACEnB,KAAK,aACLqB,KAAK,YACLvB,UAAUwB,IAAS,CACfC,OAAO,kBAAK,gCACZC,QAAQL,OAItB,CACEnB,KAAK,cACLF,UAAUwB,IAAS,CACfC,OAAO,kBAAK,oDACZC,QAAQL,IAEZM,YAAY,CACR,CACIzB,KAAK,SACLqB,KAAK,QACLvB,UAAUwB,IAAS,CACfC,OAAO,kBAAK,gCACZC,QAAQL,QAObC,O,8qCC5FR,ICUQM,EALKC,YAAgB,CAChCC,QCH0B,WAA+B,IAA9BC,EAA6B,uDAArB,CAACC,MAAM,GAAGC,EAAW,uCACxD,OAAOA,EAAOC,MACV,IAAK,YACD,OAAO,EAAP,GACOH,EADP,CACaC,MAAMD,EAAMC,MAAM,IAEnC,IAAK,eACD,OAAO,EAAP,GACOD,EADP,CACaC,MAAMD,EAAMC,MAAM,IAEnC,QACI,OAAOD,IDPfI,IDPsB,WAAkC,IAAjCJ,EAAgC,uDAAxB,CAACK,QAAQ,IAAIH,EAAW,uCACvD,OAAQA,EAAOC,MACX,IAAK,WACD,OAAO,KACAH,EADP,CACaK,QAAQH,EAAOI,UAEhC,QACI,OAAON,MGCbpC,EAAQ2C,YACVV,EACAW,YACIC,IAAe,WAAf,EAAmB,CAACC,MAGpBlC,OAAOmC,8BAAgCnC,OAAOmC,iCAIvC/C,O","file":"static/js/main.8e2d47ea.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { hot } from 'react-hot-loader';\nimport { BrowserRouter as Router, Route, Switch,Redirect} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport { ConfigProvider } from 'antd';\nimport zhCN from 'antd/es/locale/zh_CN';\n\n\n\nimport routers from \"./routes/index\";\nimport store from \"./redux/store\";\n\n\nclass App extends Component {\n    \n    render() {\n        // 参考 https://ant.design/components/config-provider-cn/ 配置\n        let yourConfig = {\n            \"locale\":{zhCN},\n        }\n        return (\n            // 通过provide把redux和react连接, store 传递到react 项目中\n            <Provider store={store}>\n                <ConfigProvider {...yourConfig}>\n                    <Router> \n                        <Switch>\n                            {/* 导入相关路由配置 */}\n                            {routers.map((r, key) => <Route component={r.component} exact={!!r.exact} key={key} path={r.path} />)}\n                            <Redirect exact from='/' to='/app/index' />\n                            <Redirect from='*' to='/404' />\n                        </Switch>\n                    </Router>\n                </ConfigProvider>\n            </Provider>\n        );\n    }\n}\n\nexport default process.env.NODE_ENV === \"development\" ? hot(module)(App) : App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('adminstock-app'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from \"react\";\nimport {Spin} from \"antd\";\nimport Loadable from \"react-loadable\";\n\n\nlet Loading = () => <Spin/>\n\nlet routes = [\n    {\n        path:\"/app\",\n        name:\"app\",\n        component:Loadable({\n            loader:()=> import(\"../layouts/Main\"),\n            loading:Loading\n        }),\n        childRoutes:[\n            {\n                path:\"/index\",\n                name:\"index\",\n                component:Loadable({\n                    loader:()=> import(\"../views/home/Home\"),\n                    loading:Loading\n                })\n            } \n        ]\n    },{\n        path:\"/404\",\n        name:\"notFound\",\n        component:Loadable({\n            loader:()=> import(\"../components/404\"),\n            loading:Loading\n        })\n    },{\n        path:\"/stock\",\n        component:Loadable({\n            loader:()=> import(\"../layouts/Main\"),\n            loading:Loading\n        }),\n        childRoutes:[\n            {\n                path:\"/index\",\n                name:\"indexList\",\n                component:Loadable({\n                    loader:()=> import(\"../views/stock/Index\"),\n                    loading:Loading\n                })\n            },{\n                path:\"/ruleList\",\n                name:\"ruleList\",\n                component:Loadable({\n                    loader:()=> import(\"../views/stock/RuleList\"),\n                    loading:Loading\n                })\n            },{\n                path:\"/stockList\",\n                name:\"stockList\",\n                component:Loadable({\n                    loader:()=> import(\"../views/stock/StockList\"),\n                    loading:Loading\n                })\n            },{\n                path:\"/ruleList\",\n                name:\"ruleList\",\n                component:Loadable({\n                    loader:()=> import(\"../views/stock/RuleList\"),\n                    loading:Loading\n                })\n            },{\n                path:\"/validList\",\n                name:\"validList\",\n                component:Loadable({\n                    loader:()=> import(\"../views/stock/ValidList\"),\n                    loading:Loading\n                })\n            }\n        ]\n    },{\n        path:\"/stockwhite\",\n        component:Loadable({\n            loader:()=> import(\"../layouts/Main\"),\n            loading:Loading\n        }),\n        childRoutes:[\n            {\n                path:\"/index\",\n                name:\"index\",\n                component:Loadable({\n                    loader:()=> import(\"../views/stock/WhiteList\"),\n                    loading:Loading\n                })\n            }\n        ]\n    }\n]\n\nexport default routes;","\n\n\nexport const appReducer = (state = {appInfo:{}},action) => {\n    switch (action.type) {\n        case \"APP_INFO\":\n            return {\n                ...state,appInfo:action.payload\n            }\n        default:\n            return state;\n    }\n}","\n\nimport {combineReducers} from \"redux\";\n\nimport {counterReducer} from \"./counter_reduce\";\nimport {appReducer} from \"./app_reducer\";\n\n\nconst rootReducer = combineReducers({\n    counter:counterReducer,\n    app:appReducer\n});\n\nexport default rootReducer;","\n// 创建reduce\n// 如果需要改变reducer的值，需要使用dispatch派发一个action\n// action 需要2个参数\n//   type: 通过type区分是对state做什么操作\n//   payload 传递的数据\nexport const counterReducer = (state = {count:1},action) => {\n    switch(action.type){\n        case \"COUNT_ADD\":\n            return {\n                ...state,count:state.count+1\n            }\n        case \"COUNT_REDUCE\":\n            return {\n                ...state,count:state.count-1\n            }    \n        default:\n            return state    \n    }\n}","\nimport {createStore,compose,applyMiddleware} from \"redux\";\n\n// redux 中间件异步请求方案插件\nimport thunk from \"redux-thunk\";\n\nimport rootReducer from \"../reducers\";\n\n\n// redux中三个重要部分, reducer,action,state(store)\n// 创建store,通过combineReducers把多个reducer合并\nconst store = createStore(\n    rootReducer,\n    compose(\n        applyMiddleware(...[thunk]), // 需要使用的中间件数组\n\n        // 开启redux devtools chrome 调试工具\n        window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n    ),\n);\n\nexport default store;"],"sourceRoot":""}